require('dotenv').config()
const express = require('express')
const morgan = require('morgan')
const app = express()
const cors = require('cors')
const Person = require('./models/person')
const mongodb = require('mongodb')

morgan.token('body', function (req, res) { return JSON.stringify(req.body) })
const customMorgan = morgan(':method :url :status :res[content-length] - :response-time ms :body')

app.use(express.json())
app.use(express.static('build'))
app.use(customMorgan)
app.use(cors())

// let persons = [
//   {
//     name: "Arto Hellas",
//     number: "040-123456",
//     id : 1
//   },
//   {
//     name: "Ada Lovelace",
//     number: "39-44-5323523",
//     id : 2
//   },
//   {
//     name: "Dan Abramov",
//     number: "12-43-234345",
//     id: 3
//   },
//   {
//     name: "Mary Poppendieck",
//     number: "39-23-6423122",
//     id: 4
//   }
// ]



app.get('/', (req, res) => {
  res.send('<h1>Hello World!</h1>')
})

app.get('/api/persons', (req, res) => {
  Person.find({}).then(persons =>{
    res.json(persons)
  })
})

// The app makes use of this ID rather than the MongoDB ID
const generateId = () => {
  const newID = Math.round(Math.random() * 1000)  
  return newID
}

app.post('/api/persons', (request, response) => {
  const body = request.body
  console.log(body)

  if (!body.name || !body.number) {
    return response.status(400).json({ 
      error: 'the name or number is missing' 
    })
  }

  const person = new Person({
    name: body.name,
    number: body.number || '',
    date: new Date(),
    id: generateId(),
  })

  person.save().then(savedPerson => {
    response.json(savedPerson)
  })
})

app.get('/info', (request, response) => {
  response.send(
      `<p>Phonebook has info for ${persons.length} people </p>
      <br />
      <p>${new Date()}</p>`)
})

// this id is based on the id generated by generateID and not MongoDB ID
app.get('/api/persons/:id', (request, response) => {
  const id = Number(request.params.id)
  const person = Person.find({id: id}).then(person => {
    response.json(person)
  })
})

// this id is based on the id generated by generateID and not MongoDB ID
app.delete('/api/persons/:id', (request, response) => {
  const id = Number(request.params.id)
  //persons = persons.filter(person => person.id !== id)
  Person.deleteOne({"id" : id}).then(
    response.status(204).end()
  )
})

// this id is based on the id generated by MongoDB
app.put('/api/persons/:id', (request, response) => {
  // This version is prior to using MongoDB
  // const id = Number(request.params.id)
  // const person = Person.find({id: id})
  // const update = request.body
  // if(person) {
  //   console.log('put entered', update)
  //   persons = persons.map(person => person.id === id ? update : person)
  //   response.json(person)
  // } else {
  //   console.log('put failed')
  //   response.status(404).end()
  // }
  const id = Number(request.params.id)
  const toUpdate = request.body
  Person.updateOne({"id": id}, {
    id: toUpdate.id,
    name: toUpdate.name,
    number: toUpdate.number,
    date: toUpdate.date}).then(
      console.log('put entered'),
      response.json(toUpdate)
    ).catch(error => {
      console.log(error)
      response.status(404).end()
    })
})

const PORT = process.env.PORT
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})
